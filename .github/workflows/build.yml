name: Build/release

on:
  push:
    branches:
      - main-v2
    tags:
      - v*
  pull_request:
    branches:
      - main-v2
      
# env:
#   DEBUG: '*'

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v3.1.0
      
      # - name: Install flatpak and flatpak-builder
      #   run: sudo apt-get install -y flatpak flatpak-builder elfutils
      #   if: matrix.os == 'ubuntu-latest'

      # - name: Install flathub repo
      #   run: |
      #     sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo && flatpak update --appstream
      #   if: matrix.os == 'ubuntu-latest'

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3.5.0
        with:
          node-version: 18

      - name: Install yarn dependencies
        run: yarn

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1.6.0
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        # if: startsWith(github.ref, 'refs/tags/v')

      # - name: Build/release Electron app
      #   uses: samuelmeuli/action-electron-builder@v1
      #   with:
      #     # GitHub token, automatically provided to the action
      #     # (No need to define this secret in the repo settings)
      #     github_token: ${{ secrets.github_token }}
      #     args: -l AppImage

      #     # If the commit is tagged with a version (e.g. "v1.0.0"),
      #     # release the app after building
      #     release: ${{ startsWith(github.ref, 'refs/tags/v') }}
      #   if: matrix.os == 'ubuntu-latest'

      - name: Publish Linux AppImage
        uses: actions/upload-artifact@v3
        with:
          name: greenlight-linux.AppImage
          path: |
            dist/*.AppImage
        if: matrix.os == 'ubuntu-latest' && contains(github.event.head_commit.message, '[build]')

      - name: Publish Linux DEB
        uses: actions/upload-artifact@v3
        with:
          name: greenlight-linux.deb
          path: |
            dist/*.deb
        if: matrix.os == 'ubuntu-latest' && contains(github.event.head_commit.message, '[build]')

      - name: Publish Mac DMG
        uses: actions/upload-artifact@v3
        with:
          name: greenlight-macos.dmg
          path: |
            dist/*.dmg
        if: matrix.os == 'macos-latest' && contains(github.event.head_commit.message, '[build]')

      - name: Publish Windows EXE
        uses: actions/upload-artifact@v3
        with:
          name: greenlight-win.zip
          path: |
            dist/*.exe
        if: matrix.os == 'windows-latest' && contains(github.event.head_commit.message, '[build]')